!! About this booklet

This booklet describes SmaCC, the Smalltalk Compiler-Compiler originally developed by John Brant. 

!!! Contents
It contains:
- A tutorial originally written by John Brant and Don Roberts (*SmaCC>http://www.refactory.com/Software/SmaCC*) and adapted to Pharo.
- Syntax to declare Syntax trees.
- Details about the directives.
- Scanner and Parser details.
- Support for transformations.
- Idioms: Often we have recurring patterns and it is nice to document them.

SmaCC was ported to Pharo by Thierry Goubier, who actively maintains the SmaCC Pharo port. SmaCC is used in production systems;
for example, it supports the automatic conversion from Delphi to C\#. 


!!! Obtaining SmaCC
 
If you haven't already done so, you will need to load Smacc.  Execute this code in a Pharo playground:

[[[
Metacello new
	baseline: 'SmaCC';
	repository: 'github://ThierryGoubier/SmaCC';
	load
]]]
 
 
Note that there is another version of SmaCC that is now part of Moose *http://moosetechnology.com*.
The difference between them is that the Moose version uses different tools to load the parser and scanner, and incorporates a special debugger. In addition, the Moose version does not support the parser shortcuts described in the *Section "Shortcuts">@shortcuts*. In the future, we hope that these versions will be unified.

!!! Basics

The compilation process comprises two phases: scanning (sometimes called lexing or lexical analysis) and parsing (which usually covers syntax analysis and semantic analysis).
Scanning converts an input stream of characters into a stream of ''tokens''. These tokens form the input to the parsing phase.
Parsing converts the stream of tokens into some object: exactly ''what'' object is determined by you, the user of SmaCC.
